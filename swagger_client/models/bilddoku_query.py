# coding: utf-8

"""
    Bilddoku

    Part of the server to support Bilddoku client and plugin.   # noqa: E501

    OpenAPI spec version: 1.0.3
    Contact: nobody@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BilddokuQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'swissname': 'str',
        'gemeinde': 'str',
        'specific_remark': 'str',
        'type_classifications': 'list[TypeClassification]',
        'canceled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'swissname': 'swissname',
        'gemeinde': 'gemeinde',
        'specific_remark': 'specific_remark',
        'type_classifications': 'Type_classifications',
        'canceled': 'canceled'
    }

    def __init__(self, id=None, swissname=None, gemeinde=None, specific_remark=None, type_classifications=None, canceled=False):  # noqa: E501
        """BilddokuQuery - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._swissname = None
        self._gemeinde = None
        self._specific_remark = None
        self._type_classifications = None
        self._canceled = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if swissname is not None:
            self.swissname = swissname
        if gemeinde is not None:
            self.gemeinde = gemeinde
        if specific_remark is not None:
            self.specific_remark = specific_remark
        if type_classifications is not None:
            self.type_classifications = type_classifications
        if canceled is not None:
            self.canceled = canceled

    @property
    def id(self):
        """Gets the id of this BilddokuQuery.  # noqa: E501


        :return: The id of this BilddokuQuery.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BilddokuQuery.


        :param id: The id of this BilddokuQuery.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def swissname(self):
        """Gets the swissname of this BilddokuQuery.  # noqa: E501


        :return: The swissname of this BilddokuQuery.  # noqa: E501
        :rtype: str
        """
        return self._swissname

    @swissname.setter
    def swissname(self, swissname):
        """Sets the swissname of this BilddokuQuery.


        :param swissname: The swissname of this BilddokuQuery.  # noqa: E501
        :type: str
        """

        self._swissname = swissname

    @property
    def gemeinde(self):
        """Gets the gemeinde of this BilddokuQuery.  # noqa: E501


        :return: The gemeinde of this BilddokuQuery.  # noqa: E501
        :rtype: str
        """
        return self._gemeinde

    @gemeinde.setter
    def gemeinde(self, gemeinde):
        """Sets the gemeinde of this BilddokuQuery.


        :param gemeinde: The gemeinde of this BilddokuQuery.  # noqa: E501
        :type: str
        """

        self._gemeinde = gemeinde

    @property
    def specific_remark(self):
        """Gets the specific_remark of this BilddokuQuery.  # noqa: E501


        :return: The specific_remark of this BilddokuQuery.  # noqa: E501
        :rtype: str
        """
        return self._specific_remark

    @specific_remark.setter
    def specific_remark(self, specific_remark):
        """Sets the specific_remark of this BilddokuQuery.


        :param specific_remark: The specific_remark of this BilddokuQuery.  # noqa: E501
        :type: str
        """

        self._specific_remark = specific_remark

    @property
    def type_classifications(self):
        """Gets the type_classifications of this BilddokuQuery.  # noqa: E501


        :return: The type_classifications of this BilddokuQuery.  # noqa: E501
        :rtype: list[TypeClassification]
        """
        return self._type_classifications

    @type_classifications.setter
    def type_classifications(self, type_classifications):
        """Sets the type_classifications of this BilddokuQuery.


        :param type_classifications: The type_classifications of this BilddokuQuery.  # noqa: E501
        :type: list[TypeClassification]
        """

        self._type_classifications = type_classifications

    @property
    def canceled(self):
        """Gets the canceled of this BilddokuQuery.  # noqa: E501


        :return: The canceled of this BilddokuQuery.  # noqa: E501
        :rtype: bool
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this BilddokuQuery.


        :param canceled: The canceled of this BilddokuQuery.  # noqa: E501
        :type: bool
        """

        self._canceled = canceled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BilddokuQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BilddokuQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
